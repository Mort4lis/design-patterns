# Принцип подстановки Лисков

# Подклассы должны дополнять, а не замещать поведение базового класса

# Нужно стремиться создавать подклассы таким образом, чтобы их
# объекты можно было подставлять вместо объектов базового класса,
# не ломая при этом функциональности клиентского кода.

# Ряд требований к подклассам, а точнее к их переопределнным методам:
#
# 1. Типы параметров переопределенного метода в подклассе должны совпадать
# или быть более абстрактными, чем типы параметров базового метода (1.py).
#
# 2. Тип возвращаемого значения метода подкласса должен совпадать или быть
# подтипом возвращаемого значения базового метода (2.py).
#
# 3. Метод подкласса не должен выбрасывать исключения, которые не свойственны базовому методу
# (Предположим, что клиентский код работает с базовым классом / объектом. Весь его код
# обернут операторами try-except с конкретными типами выбрасываемых базовым методом исключений. Если мы подставим
# вместо объекта базового класса объект подкласса с методом, в котором выбрасываются исключения,
# не предусмотренные базовым методом, то клиентский код может поломаться, т.к исключения могут
# проскочить обработчики try-except.)
#
# 4. Метод подкласса не должен ужесточать пред условия (3.py).
#
# 5. Метод подкласса не должен ослаблять пост условия (4.py).
#
# 6. Инварианты класса должны остаться без изменений
# Инвариант - это набор условий при которых объект имеет смысл
# (инвариант кота - это наличие четырех лап, хвоста, умение мурчать и т.д)
# Идеальным вариантом - был бы подкласс, который вводит новые поля и методы,
# не прикасаясь к полям базового класса.
#
# 7. Подкласс не должен изменять значения приватных полей базового класса.
