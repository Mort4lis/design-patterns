from abc import ABC, abstractmethod


class ServiceInterface(ABC):
    """
    Интерфейс Сервиса объявляет общие операции как для Реального Сервиса, так
    и для Заместителя. Пока клиент работает с Реальным Сервисом, используя этот
    интерфейс, вы сможете передать ему заместителя вместо реального сервиса.
    """

    @abstractmethod
    def operation(self):
        pass


class Service(ServiceInterface):
    """
    Конкретный Сервис содержит некоторую базовую бизнес-логику. Как правило,
    Реальные Сервисы способны выполнять некоторую полезную работу, которая к
    тому же может быть очень медленной. Заместитель может решить эти задачи
    без каких-либо изменений в коде Реального Сервиса.
    """

    def operation(self):
        print('Выполение операции конкретного сервиса')


class Proxy(ServiceInterface):
    """
    Интерфейс Заместителя идентичен интерфейсу Реального Сервиса.
    """

    def __init__(self, s: Service):
        self._real_service = s

    def check_access(self):
        return True

    def operation(self):
        """
        Наиболее распространёнными областями применения паттерна Заместитель
        являются ленивая загрузка, кэширование, контроль доступа, ведение
        журнала и т.д. Заместитель может выполнить одну из этих задач, а затем,
        в зависимости от результата, передать выполнение одноимённому методу в
        связанном объекте класса Реального Сервиса.
        """
        print('Выполнение операции конкретного сервиса из объекта-фальшивки')
        if self.check_access():
            self._real_service.operation()


def client_code(service: ServiceInterface):
    """
    Клиентский код должен работать со всеми объектами (как с реальными, так и
    заместителями) через интерфейс Сервиса, чтобы поддерживать как реальные
    сервисы, так и заместителей. В реальной жизни, однако, клиенты в основном
    работают с реальными сервисами напрямую. В этом случае, для более простой
    реализации паттерна, можно расширить заместителя из класса реального
    сервиса.
    """
    service.operation()


if __name__ == '__main__':
    service = Service()

    client_code(service)
    print('-' * 75)
    client_code(Proxy(service))
