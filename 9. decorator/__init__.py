# Декоратор (Decorator) - это структурный паттерн проектирования, который позволяет динамически
# добавлять объектам новую функциональность, оборачивая их в полезные обертки.
#
# Создается класс-обертка, которая содержит ссылку на оборачиваемый компонент. Стоит отметить,что
# компонентом может выступать не только объект отдельного класса, содержащий какую-то полезную бизнес-логику, но
# и сами объекты-обертки. В результате чего клиенту не важно с чем работать, с реальным компонентом или оберткой,
# т.к между конкретными компонентами и объектами-обертками (т.е декораторами) существует общий интерфейс.
#
# Применимость:
# 1. Когда вам нужно добавлять обязаности объектам на лету, незаметно для кода, который их использует.
# 2. Когда нельзя расширить обязаности объекта с помощью наследования (в таких языках, в которых есть
# ключевое слово final, запрещающий дальнейшее наследование класса).
#
# Плюсы:
# 1. Большая гибкость, чем у наследования.
# 2. Позволяет добавлять обязанности на лету.
# 3. Можно добавлять несколько новых обязанностей сразу.
# 4. Позволяет иметь несколько мелких объектов вместо одного объекта на все случаи жизни.
#
# Минусы:
# 1. Трудно конфигурировать многократно обёрнутые компоненты.
# 2. Обилие крошечных классов.
